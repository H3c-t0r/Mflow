"""add metric step

Revision ID: a2a67c581afd
Revises: 7c2ae39268dd
Create Date: 2019-04-21 23:44:55.882033

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a2a67c581afd'
down_revision = '7c2ae39268dd'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('metrics', sa.Column('step', sa.BigInteger(), nullable=False, server_default='0'))
    # ### end Alembic commands ###
    # Stolen from https://stackoverflow.com/a/48091035
    # Drop primary key constraint. Note the CASCADE clause - this deletes the foreign key constraint.
    # Use batch mode so that we can run "ALTER TABLE" statements against SQLite databases
    # https://alembic.sqlalchemy.org/en/latest/batch.html#running-batch-migrations-for-sqlite-and-other-databases
    with op.batch_alter_table("metrics") as batch_op:
        batch_op.drop_constraint(constraint_name='metric_pk')
        batch_op.create_primary_key(
            constraint_name='metric_pk',
            columns=['key', 'timestamp', 'step', 'run_uuid', 'value'])
        # Re-create the foreign key constraint
        batch_op.create_foreign_key(
            constraint_name='runs.run_uuid', referent_table='runs', local_cols=['run_uuid'],
            remote_cols=['run_uuid'])

    # op.drop_constraint(constraint_name='pk_metrics', table_name='metrics')
    # # Re-create the primary key constraint
    # op.create_primary_key(constraint_name='pk_metrics', table_name='metrics',
    #                       columns=['key', 'timestamp', 'step', 'run_uuid', 'value'])
    # # Re-create the foreign key constraint
    # op.create_foreign_key('runs.run_uuid', 'runs', 'metrics', ['run_uuid'], ['run_uuid'],
    #                       ondelete='CASCADE')


def downgrade():
    pass