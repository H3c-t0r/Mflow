name: Cross version tests

on:
  workflow_dispatch:
    inputs:
      repository:
        description: >
          [Optional] Repository name with owner. For example, mlflow/mlflow.
           Defaults to the repository that triggered a workflow.
        required: false
        default: ""
      ref:
        description: >
          [Optional] The branch, tag or SHA to checkout. When checking out the repository that
           triggered a workflow, this defaults to the reference or SHA for that event. Otherwise,
           uses the default branch.
        required: false
        default: ""
      pattern:
        description: >
          [Optional] If specified, run jobs whose name match the specified pattern. For example,
           "sklearn_.+_autologging" runs all sklearn autologging jobs.
        required: false
        default: ""
  schedule:
    # Run this workflow daily at 7:00 UTC
    - cron: "0 7 * * *"
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/master' && github.run_number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      is_matrix_empty: ${{ steps.set-matrix.outputs.is_matrix_empty }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - uses: actions/setup-python@v3
        with:
          python-version: "3.7"
      - name: Check labels
        uses: actions/github-script@v4
        id: enable-dev-tests
        if: ${{ github.event_name == 'pull_request' }}
        with:
          result-encoding: string
          script: |
            const labels = await github.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            return labels.data.some(({ name }) => name === "enable-dev-tests");
      - name: Install cross-version-test
        run: |
          pip install -e cross-version-test
      - id: set-matrix
        name: Set matrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          event_name="${{ github.event_name }}"
          if [ "$event_name" = "pull_request" ]; then
            repo="${{ github.repository }}"
            pr_number="${{ github.event.pull_request.number }}"
            ref_versions_yaml="https://raw.githubusercontent.com/$repo/master/mlflow/ml-package-versions.yml"
            changed_files="$(python dev/list_changed_files.py --repository $repo --pr-num $pr_number)"
            enable_dev_tests="${{ steps.enable-dev-tests.outputs.result }}"
            exclude_dev_versions=$([ "$enable_dev_tests" == "true" ] && echo "--include-dev-versions" || echo "--exclude-dev-versions")
            cross-version-test diff --ref-versions-yaml "$ref_versions_yaml" --changed-files "$changed_files" "$exclude_dev_versions"
          elif [ "$event_name" = "workflow_dispatch" ]; then
            cross-version-test build --pattern "${{ github.event.inputs.pattern }}"
          else
            cross-version-test build
          fi

          matrix=$(cat .cross-version-test/matrix.json)
          is_matrix_empty=$([ "$matrix" == "{}" ] && echo "true" || echo "false")
          echo "::set-output name=matrix::$matrix"
          echo "::set-output name=is_matrix_empty::$is_matrix_empty"
  test:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get Java version
        id: get-java-version
        run: |
          if [ "${{ matrix.package }}" = "mleap" ]
          then
            java_version=8
          else
            java_version=11
          fi
          echo "::set-output name=version::$java_version"
      - uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Get python version
        id: get-python-version
        run: |
          if [[ "${{ matrix.package }}" = "statsmodels" && "${{ matrix.version }}" = "dev" ]] || \
             [[ "${{ matrix.package }}" = "scikit-learn" && "${{ matrix.version }}" = "dev" ]]
          then
            python_version=3.8
          else
            python_version=3.7
          fi
          echo "::set-output name=version::$python_version"
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - name: Get cache key
        env:
          INSTALL_COMMAND: ${{ matrix.install }}
        id: get-cache-key
        run: |
          date=$(date -u "+%Y%m%d")
          hash=$(echo -n "$INSTALL_COMMAND" | sha256sum)
          echo "::set-output name=key::$ImageOS-$ImageVersion-wheels-$date-$hash"
      - uses: actions/cache@v2
        # We only cache wheels that take long (> 10 min) to build
        if: ${{ contains('pyspark, catboost, scikit-learn', matrix.package) && matrix.version == 'dev' }}
        with:
          path: /home/runner/.cache/wheels
          key: ${{ steps.get-cache-key.outputs.key }}
          restore-keys: |
            ${{ steps.get-cache-key.outputs.key }}
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install --upgrade pip wheel
          pip install -e .
          pip install -r requirements/small-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        env:
          CACHE_DIR: /home/runner/.cache/wheels
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          SPARK_LOCAL_IP: 127.0.0.1
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  cli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - uses: actions/setup-python@v3
        with:
          python-version: '3.7'
      - name: Install cross-version-test
        run: |
          pip install -e 'cross-version-test[dev]'
      - name: Run mypy
        run: |
          mypy --disallow-untyped-defs cross-version-test
      - name: Run tests
        run: |
          pytest cross-version-test/tests -s
