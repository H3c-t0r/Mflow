name: Cross version tests

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  workflow_dispatch:
    inputs:
      repository:
        description: >
          [Optional] Repository name with owner. For example, mlflow/mlflow.
           Defaults to the repository that triggered a workflow.
        required: false
        default: ""
      ref:
        description: >
          [Optional] The branch, tag or SHA to checkout. When checking out the repository that
           triggered a workflow, this defaults to the reference or SHA for that event. Otherwise,
           uses the default branch.
        required: false
        default: ""
      flavors:
        description: "[Optional] Comma-separated string specifying which flavors to test (e.g. 'sklearn, xgboost'). If unspecified, all flavors are tested."
        required: false
        default: ""
      versions:
        description: "[Optional] Comma-separated string specifying which versions to test (e.g. '1.2.3, 4.5.6'). If unspecified, all versions are tested."
        required: false
        default: ""
  schedule:
    # Run this workflow daily at 13:00 UTC
    - cron: "0 13 * * *"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

env:
  MLFLOW_HOME: /home/runner/work/mlflow/mlflow
  PIP_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      issues: read # listLabelsOnIssue
    outputs:
      sklearn_matrix: ${{ steps.set-matrix.outputs.sklearn_matrix }}
      sklearn_is_matrix_empty: ${{ steps.set-matrix.outputs.sklearn_is_matrix_empty }}
      pytorch_matrix: ${{ steps.set-matrix.outputs.pytorch_matrix }}
      pytorch_is_matrix_empty: ${{ steps.set-matrix.outputs.pytorch_is_matrix_empty }}
      pytorch-lightning_matrix: ${{ steps.set-matrix.outputs.pytorch-lightning_matrix }}
      pytorch-lightning_is_matrix_empty: ${{ steps.set-matrix.outputs.pytorch-lightning_is_matrix_empty }}
      keras_matrix: ${{ steps.set-matrix.outputs.keras_matrix }}
      keras_is_matrix_empty: ${{ steps.set-matrix.outputs.keras_is_matrix_empty }}
      tensorflow_matrix: ${{ steps.set-matrix.outputs.tensorflow_matrix }}
      tensorflow_is_matrix_empty: ${{ steps.set-matrix.outputs.tensorflow_is_matrix_empty }}
      xgboost_matrix: ${{ steps.set-matrix.outputs.xgboost_matrix }}
      xgboost_is_matrix_empty: ${{ steps.set-matrix.outputs.xgboost_is_matrix_empty }}
      lightgbm_matrix: ${{ steps.set-matrix.outputs.lightgbm_matrix }}
      lightgbm_is_matrix_empty: ${{ steps.set-matrix.outputs.lightgbm_is_matrix_empty }}
      catboost_matrix: ${{ steps.set-matrix.outputs.catboost_matrix }}
      catboost_is_matrix_empty: ${{ steps.set-matrix.outputs.catboost_is_matrix_empty }}
      gluon_matrix: ${{ steps.set-matrix.outputs.gluon_matrix }}
      gluon_is_matrix_empty: ${{ steps.set-matrix.outputs.gluon_is_matrix_empty }}
      fastai_matrix: ${{ steps.set-matrix.outputs.fastai_matrix }}
      fastai_is_matrix_empty: ${{ steps.set-matrix.outputs.fastai_is_matrix_empty }}
      onnx_matrix: ${{ steps.set-matrix.outputs.onnx_matrix }}
      onnx_is_matrix_empty: ${{ steps.set-matrix.outputs.onnx_is_matrix_empty }}
      spacy_matrix: ${{ steps.set-matrix.outputs.spacy_matrix }}
      spacy_is_matrix_empty: ${{ steps.set-matrix.outputs.spacy_is_matrix_empty }}
      statsmodels_matrix: ${{ steps.set-matrix.outputs.statsmodels_matrix }}
      statsmodels_is_matrix_empty: ${{ steps.set-matrix.outputs.statsmodels_is_matrix_empty }}
      spark_matrix: ${{ steps.set-matrix.outputs.spark_matrix }}
      spark_is_matrix_empty: ${{ steps.set-matrix.outputs.spark_is_matrix_empty }}
      mleap_matrix: ${{ steps.set-matrix.outputs.mleap_matrix }}
      mleap_is_matrix_empty: ${{ steps.set-matrix.outputs.mleap_is_matrix_empty }}
      prophet_matrix: ${{ steps.set-matrix.outputs.prophet_matrix }}
      prophet_is_matrix_empty: ${{ steps.set-matrix.outputs.prophet_is_matrix_empty }}
      pmdarima_matrix: ${{ steps.set-matrix.outputs.pmdarima_matrix }}
      pmdarima_is_matrix_empty: ${{ steps.set-matrix.outputs.pmdarima_is_matrix_empty }}
      diviner_matrix: ${{ steps.set-matrix.outputs.diviner_matrix }}
      diviner_is_matrix_empty: ${{ steps.set-matrix.outputs.diviner_is_matrix_empty }}
      h2o_matrix: ${{ steps.set-matrix.outputs.h2o_matrix }}
      h2o_is_matrix_empty: ${{ steps.set-matrix.outputs.h2o_is_matrix_empty }}
      shap_matrix: ${{ steps.set-matrix.outputs.shap_matrix }}
      shap_is_matrix_empty: ${{ steps.set-matrix.outputs.shap_is_matrix_empty }}
      paddle_matrix: ${{ steps.set-matrix.outputs.paddle_matrix }}
      paddle_is_matrix_empty: ${{ steps.set-matrix.outputs.paddle_is_matrix_empty }}
      transformers_matrix: ${{ steps.set-matrix.outputs.transformers_matrix }}
      transformers_is_matrix_empty: ${{ steps.set-matrix.outputs.transformers_is_matrix_empty }}
      openai_matrix: ${{ steps.set-matrix.outputs.openai_matrix }}
      openai_is_matrix_empty: ${{ steps.set-matrix.outputs.openai_is_matrix_empty }}
      langchain_matrix: ${{ steps.set-matrix.outputs.langchain_matrix }}
      langchain_is_matrix_empty: ${{ steps.set-matrix.outputs.langchain_is_matrix_empty }}
      sentence_transformers_matrix: ${{ steps.set-matrix.outputs.sentence_transformers_matrix }}
      sentence_transformers_is_matrix_empty: ${{ steps.set-matrix.outputs.sentence_transformers_is_matrix_empty }}
      johnsnowlabs_matrix: ${{ steps.set-matrix.outputs.johnsnowlabs_matrix }}
      johnsnowlabs_is_matrix_empty: ${{ steps.set-matrix.outputs.johnsnowlabs_is_matrix_empty }}
      promptflow_matrix: ${{ steps.set-matrix.outputs.promptflow_matrix }}
      promptflow_is_matrix_empty: ${{ steps.set-matrix.outputs.promptflow_is_matrix_empty }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - uses: ./.github/actions/untracked
      - uses: ./.github/actions/setup-python
      - name: Install dependencies
        run: |
          pip install -r dev/requirements.txt
          pip install pytest pytest-cov
      - name: Check labels
        uses: actions/github-script@v7
        id: check-labels
        with:
          script: |
            if (context.eventName !== "pull_request") {
              return {
                enable_dev_tests: true,
                only_latest: false,
              };
            }
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const labelNames = labels.data.map(({ name }) => name);
            return {
              enable_dev_tests: labelNames.includes("enable-dev-tests"),
              only_latest: labelNames.includes("only-latest"),
            };
      - name: Test set_matrix.py
        run: |
          python -m pytest --noconftest dev/tests
      - id: set-matrix
        name: Set matrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          EVENT_NAME="${{ github.event_name }}"
          if [ "$EVENT_NAME" = "pull_request" ]; then
            REPO="${{ github.repository }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            BASE_REF="${{ github.base_ref }}"
            REF_VERSIONS_YAML="https://raw.githubusercontent.com/$REPO/$BASE_REF/mlflow/ml-package-versions.yml"
            CHANGED_FILES="$(python dev/list_changed_files.py --repository $REPO --pr-num $PR_NUMBER)"
            ENABLE_DEV_TESTS="${{ fromJson(steps.check-labels.outputs.result).enable_dev_tests }}"
            NO_DEV_FLAG=$([ "$ENABLE_DEV_TESTS" == "true" ] && echo "" || echo "--no-dev")
            ONLY_LATEST="${{ fromJson(steps.check-labels.outputs.result).only_latest }}"
            ONLY_LATEST_FLAG=$([ "$ONLY_LATEST" == "true" ] && echo "--only-latest" || echo "")
            python dev/set_matrix.py --ref-versions-yaml $REF_VERSIONS_YAML --changed-files "$CHANGED_FILES" $NO_DEV_FLAG $ONLY_LATEST_FLAG
          elif [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            python dev/set_matrix.py --flavors "${{ github.event.inputs.flavors }}" --versions "${{ github.event.inputs.versions }}"
          else
            python dev/set_matrix.py
          fi

  sklearn:
    needs: set-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.sklearn_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}


  pytorch:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.pytorch_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.pytorch_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - uses: ./.github/actions/free-disk-space
        if: startsWith(matrix.version, '2.')
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
          HF_HUB_ENABLE_HF_TRANSFER: 1
        run: |
          ${{ matrix.run }}

  pytorch-lightning:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.pytorch-lightning_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.pytorch-lightning_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  keras:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.keras_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.keras_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  tensorflow:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.tensorflow_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.tensorflow_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
          HF_HUB_ENABLE_HF_TRANSFER: 1
        run: |
          ${{ matrix.run }}

  xgboost:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.xgboost_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.xgboost_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  lightgbm:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.lightgbm_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.lightgbm_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  catboost:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.catboost_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.catboost_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  fastai:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.fastai_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.fastai_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  onnx:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.onnx_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.onnx_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  spacy:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.spacy_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.spacy_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  statsmodels:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.statsmodels_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.statsmodels_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  spark:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.spark_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.spark_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          pip install packaging
          use_java17=$(python -c "from packaging.version import parse; print('${{ matrix.version }}' == 'dev' or parse('${{ matrix.version }}') > parse('3.4.1'))")
          if [ "$use_java17" = "True" ]; then
            java_version=17
          else
            java_version=11
          fi
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
          SPARK_LOCAL_IP: localhost
        run: |
          ${{ matrix.run }}

  prophet:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.prophet_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.prophet_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          # prophet==1.0.1 can only be installed `setup.py install` fallback but this was removed
          # in pip 23.1. See https://github.com/pypa/pip/issues/8368 more details.
          if [ "${{ matrix.package }}==${{ matrix.version }}" = "prophet==1.0.1" ]
          then
            PIP_SPEC="<23.1"
          else
            PIP_SPEC=""
          fi
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  pmdarima:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.pmdarima_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.pmdarima_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  diviner:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.diviner_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.diviner_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  h2o:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.h2o_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.h2o_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  shap:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.shap_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.shap_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  paddle:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.paddle_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.paddle_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  transformers:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.transformers_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.transformers_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - uses: ./.github/actions/free-disk-space
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - name: Prefetch Transformer models
        if: matrix.category == 'models'
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
          HF_HUB_ENABLE_HF_TRANSFER: 1
        run: |
          ${{ matrix.run }}

  openai:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.openai_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.openai_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  langchain:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.langchain_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.langchain_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  sentence_transformers:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.sentence_transformers_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.sentence_transformers_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - uses: ./.github/actions/free-disk-space
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}

  johnsnowlabs:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.johnsnowlabs_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.johnsnowlabs_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
          JOHNSNOWLABS_LICENSE_JSON: ${{ secrets.JOHNSNOWLABS_LICENSE_JSON }}
        run: |
          ${{ matrix.run }}

  promptflow:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.promptflow_is_matrix_empty == 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.promptflow_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - name: Get python version
        id: get-python-version
        run: |
          python_version=$(python dev/get_minimum_required_python.py -p ${{ matrix.package }} -v ${{ matrix.version }} --python-versions "3.8,3.9")
          echo "version=$python_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      - uses: ./.github/actions/setup-pyenv
      - name: Get Java version
        id: get-java-version
        run: |
          java_version=11
          echo "version=$java_version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ steps.get-java-version.outputs.version }}
          distribution: "adopt"
      - name: Install mlflow & test dependencies
        run: |
          python --version
          pip install -U pip wheel
          pip install -e .[extras]
          pip install -r requirements/test-requirements.txt
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - name: Check package versions
        run: |
          python dev/show_package_release_dates.py
      - uses: ./.github/actions/pipdeptree
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          PACKAGE_VERSION: ${{ matrix.version }}
        run: |
          ${{ matrix.run }}
