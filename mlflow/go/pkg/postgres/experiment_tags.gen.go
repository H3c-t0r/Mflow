// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package postgres

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mlflow/mlflow/mlflow/go/pkg/postgres/model"
)

func newExperimentTag(db *gorm.DB, opts ...gen.DOOption) experimentTag {
	_experimentTag := experimentTag{}

	_experimentTag.experimentTagDo.UseDB(db, opts...)
	_experimentTag.experimentTagDo.UseModel(&model.ExperimentTag{})

	tableName := _experimentTag.experimentTagDo.TableName()
	_experimentTag.ALL = field.NewAsterisk(tableName)
	_experimentTag.Key = field.NewString(tableName, "key")
	_experimentTag.Value = field.NewString(tableName, "value")
	_experimentTag.ExperimentID = field.NewInt32(tableName, "experiment_id")

	_experimentTag.fillFieldMap()

	return _experimentTag
}

type experimentTag struct {
	experimentTagDo

	ALL          field.Asterisk
	Key          field.String
	Value        field.String
	ExperimentID field.Int32

	fieldMap map[string]field.Expr
}

func (e experimentTag) Table(newTableName string) *experimentTag {
	e.experimentTagDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e experimentTag) As(alias string) *experimentTag {
	e.experimentTagDo.DO = *(e.experimentTagDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *experimentTag) updateTableName(table string) *experimentTag {
	e.ALL = field.NewAsterisk(table)
	e.Key = field.NewString(table, "key")
	e.Value = field.NewString(table, "value")
	e.ExperimentID = field.NewInt32(table, "experiment_id")

	e.fillFieldMap()

	return e
}

func (e *experimentTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *experimentTag) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["key"] = e.Key
	e.fieldMap["value"] = e.Value
	e.fieldMap["experiment_id"] = e.ExperimentID
}

func (e experimentTag) clone(db *gorm.DB) experimentTag {
	e.experimentTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e experimentTag) replaceDB(db *gorm.DB) experimentTag {
	e.experimentTagDo.ReplaceDB(db)
	return e
}

type experimentTagDo struct{ gen.DO }

type IExperimentTagDo interface {
	gen.SubQuery
	Debug() IExperimentTagDo
	WithContext(ctx context.Context) IExperimentTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExperimentTagDo
	WriteDB() IExperimentTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExperimentTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExperimentTagDo
	Not(conds ...gen.Condition) IExperimentTagDo
	Or(conds ...gen.Condition) IExperimentTagDo
	Select(conds ...field.Expr) IExperimentTagDo
	Where(conds ...gen.Condition) IExperimentTagDo
	Order(conds ...field.Expr) IExperimentTagDo
	Distinct(cols ...field.Expr) IExperimentTagDo
	Omit(cols ...field.Expr) IExperimentTagDo
	Join(table schema.Tabler, on ...field.Expr) IExperimentTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExperimentTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExperimentTagDo
	Group(cols ...field.Expr) IExperimentTagDo
	Having(conds ...gen.Condition) IExperimentTagDo
	Limit(limit int) IExperimentTagDo
	Offset(offset int) IExperimentTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExperimentTagDo
	Unscoped() IExperimentTagDo
	Create(values ...*model.ExperimentTag) error
	CreateInBatches(values []*model.ExperimentTag, batchSize int) error
	Save(values ...*model.ExperimentTag) error
	First() (*model.ExperimentTag, error)
	Take() (*model.ExperimentTag, error)
	Last() (*model.ExperimentTag, error)
	Find() ([]*model.ExperimentTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExperimentTag, err error)
	FindInBatches(result *[]*model.ExperimentTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ExperimentTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExperimentTagDo
	Assign(attrs ...field.AssignExpr) IExperimentTagDo
	Joins(fields ...field.RelationField) IExperimentTagDo
	Preload(fields ...field.RelationField) IExperimentTagDo
	FirstOrInit() (*model.ExperimentTag, error)
	FirstOrCreate() (*model.ExperimentTag, error)
	FindByPage(offset int, limit int) (result []*model.ExperimentTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExperimentTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e experimentTagDo) Debug() IExperimentTagDo {
	return e.withDO(e.DO.Debug())
}

func (e experimentTagDo) WithContext(ctx context.Context) IExperimentTagDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e experimentTagDo) ReadDB() IExperimentTagDo {
	return e.Clauses(dbresolver.Read)
}

func (e experimentTagDo) WriteDB() IExperimentTagDo {
	return e.Clauses(dbresolver.Write)
}

func (e experimentTagDo) Session(config *gorm.Session) IExperimentTagDo {
	return e.withDO(e.DO.Session(config))
}

func (e experimentTagDo) Clauses(conds ...clause.Expression) IExperimentTagDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e experimentTagDo) Returning(value interface{}, columns ...string) IExperimentTagDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e experimentTagDo) Not(conds ...gen.Condition) IExperimentTagDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e experimentTagDo) Or(conds ...gen.Condition) IExperimentTagDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e experimentTagDo) Select(conds ...field.Expr) IExperimentTagDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e experimentTagDo) Where(conds ...gen.Condition) IExperimentTagDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e experimentTagDo) Order(conds ...field.Expr) IExperimentTagDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e experimentTagDo) Distinct(cols ...field.Expr) IExperimentTagDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e experimentTagDo) Omit(cols ...field.Expr) IExperimentTagDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e experimentTagDo) Join(table schema.Tabler, on ...field.Expr) IExperimentTagDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e experimentTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExperimentTagDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e experimentTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IExperimentTagDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e experimentTagDo) Group(cols ...field.Expr) IExperimentTagDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e experimentTagDo) Having(conds ...gen.Condition) IExperimentTagDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e experimentTagDo) Limit(limit int) IExperimentTagDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e experimentTagDo) Offset(offset int) IExperimentTagDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e experimentTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExperimentTagDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e experimentTagDo) Unscoped() IExperimentTagDo {
	return e.withDO(e.DO.Unscoped())
}

func (e experimentTagDo) Create(values ...*model.ExperimentTag) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e experimentTagDo) CreateInBatches(values []*model.ExperimentTag, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e experimentTagDo) Save(values ...*model.ExperimentTag) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e experimentTagDo) First() (*model.ExperimentTag, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExperimentTag), nil
	}
}

func (e experimentTagDo) Take() (*model.ExperimentTag, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExperimentTag), nil
	}
}

func (e experimentTagDo) Last() (*model.ExperimentTag, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExperimentTag), nil
	}
}

func (e experimentTagDo) Find() ([]*model.ExperimentTag, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExperimentTag), err
}

func (e experimentTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExperimentTag, err error) {
	buf := make([]*model.ExperimentTag, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e experimentTagDo) FindInBatches(result *[]*model.ExperimentTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e experimentTagDo) Attrs(attrs ...field.AssignExpr) IExperimentTagDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e experimentTagDo) Assign(attrs ...field.AssignExpr) IExperimentTagDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e experimentTagDo) Joins(fields ...field.RelationField) IExperimentTagDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e experimentTagDo) Preload(fields ...field.RelationField) IExperimentTagDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e experimentTagDo) FirstOrInit() (*model.ExperimentTag, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExperimentTag), nil
	}
}

func (e experimentTagDo) FirstOrCreate() (*model.ExperimentTag, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExperimentTag), nil
	}
}

func (e experimentTagDo) FindByPage(offset int, limit int) (result []*model.ExperimentTag, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e experimentTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e experimentTagDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e experimentTagDo) Delete(models ...*model.ExperimentTag) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *experimentTagDo) withDO(do gen.Dao) *experimentTagDo {
	e.DO = *do.(*gen.DO)
	return e
}
