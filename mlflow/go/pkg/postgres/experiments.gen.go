// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package postgres

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mlflow/mlflow/mlflow/go/pkg/postgres/model"
)

func newExperiment(db *gorm.DB, opts ...gen.DOOption) experiment {
	_experiment := experiment{}

	_experiment.experimentDo.UseDB(db, opts...)
	_experiment.experimentDo.UseModel(&model.Experiment{})

	tableName := _experiment.experimentDo.TableName()
	_experiment.ALL = field.NewAsterisk(tableName)
	_experiment.ExperimentID = field.NewInt32(tableName, "experiment_id")
	_experiment.Name = field.NewString(tableName, "name")
	_experiment.ArtifactLocation = field.NewString(tableName, "artifact_location")
	_experiment.LifecycleStage = field.NewString(tableName, "lifecycle_stage")
	_experiment.CreationTime = field.NewInt64(tableName, "creation_time")
	_experiment.LastUpdateTime = field.NewInt64(tableName, "last_update_time")
	_experiment.ExperimentTags = experimentHasManyExperimentTags{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ExperimentTags", "model.ExperimentTag"),
	}

	_experiment.fillFieldMap()

	return _experiment
}

type experiment struct {
	experimentDo

	ALL              field.Asterisk
	ExperimentID     field.Int32
	Name             field.String
	ArtifactLocation field.String
	LifecycleStage   field.String
	CreationTime     field.Int64
	LastUpdateTime   field.Int64
	ExperimentTags   experimentHasManyExperimentTags

	fieldMap map[string]field.Expr
}

func (e experiment) Table(newTableName string) *experiment {
	e.experimentDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e experiment) As(alias string) *experiment {
	e.experimentDo.DO = *(e.experimentDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *experiment) updateTableName(table string) *experiment {
	e.ALL = field.NewAsterisk(table)
	e.ExperimentID = field.NewInt32(table, "experiment_id")
	e.Name = field.NewString(table, "name")
	e.ArtifactLocation = field.NewString(table, "artifact_location")
	e.LifecycleStage = field.NewString(table, "lifecycle_stage")
	e.CreationTime = field.NewInt64(table, "creation_time")
	e.LastUpdateTime = field.NewInt64(table, "last_update_time")

	e.fillFieldMap()

	return e
}

func (e *experiment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *experiment) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["experiment_id"] = e.ExperimentID
	e.fieldMap["name"] = e.Name
	e.fieldMap["artifact_location"] = e.ArtifactLocation
	e.fieldMap["lifecycle_stage"] = e.LifecycleStage
	e.fieldMap["creation_time"] = e.CreationTime
	e.fieldMap["last_update_time"] = e.LastUpdateTime

}

func (e experiment) clone(db *gorm.DB) experiment {
	e.experimentDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e experiment) replaceDB(db *gorm.DB) experiment {
	e.experimentDo.ReplaceDB(db)
	return e
}

type experimentHasManyExperimentTags struct {
	db *gorm.DB

	field.RelationField
}

func (a experimentHasManyExperimentTags) Where(conds ...field.Expr) *experimentHasManyExperimentTags {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a experimentHasManyExperimentTags) WithContext(ctx context.Context) *experimentHasManyExperimentTags {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a experimentHasManyExperimentTags) Session(session *gorm.Session) *experimentHasManyExperimentTags {
	a.db = a.db.Session(session)
	return &a
}

func (a experimentHasManyExperimentTags) Model(m *model.Experiment) *experimentHasManyExperimentTagsTx {
	return &experimentHasManyExperimentTagsTx{a.db.Model(m).Association(a.Name())}
}

type experimentHasManyExperimentTagsTx struct{ tx *gorm.Association }

func (a experimentHasManyExperimentTagsTx) Find() (result []*model.ExperimentTag, err error) {
	return result, a.tx.Find(&result)
}

func (a experimentHasManyExperimentTagsTx) Append(values ...*model.ExperimentTag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a experimentHasManyExperimentTagsTx) Replace(values ...*model.ExperimentTag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a experimentHasManyExperimentTagsTx) Delete(values ...*model.ExperimentTag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a experimentHasManyExperimentTagsTx) Clear() error {
	return a.tx.Clear()
}

func (a experimentHasManyExperimentTagsTx) Count() int64 {
	return a.tx.Count()
}

type experimentDo struct{ gen.DO }

type IExperimentDo interface {
	gen.SubQuery
	Debug() IExperimentDo
	WithContext(ctx context.Context) IExperimentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExperimentDo
	WriteDB() IExperimentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExperimentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExperimentDo
	Not(conds ...gen.Condition) IExperimentDo
	Or(conds ...gen.Condition) IExperimentDo
	Select(conds ...field.Expr) IExperimentDo
	Where(conds ...gen.Condition) IExperimentDo
	Order(conds ...field.Expr) IExperimentDo
	Distinct(cols ...field.Expr) IExperimentDo
	Omit(cols ...field.Expr) IExperimentDo
	Join(table schema.Tabler, on ...field.Expr) IExperimentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExperimentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExperimentDo
	Group(cols ...field.Expr) IExperimentDo
	Having(conds ...gen.Condition) IExperimentDo
	Limit(limit int) IExperimentDo
	Offset(offset int) IExperimentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExperimentDo
	Unscoped() IExperimentDo
	Create(values ...*model.Experiment) error
	CreateInBatches(values []*model.Experiment, batchSize int) error
	Save(values ...*model.Experiment) error
	First() (*model.Experiment, error)
	Take() (*model.Experiment, error)
	Last() (*model.Experiment, error)
	Find() ([]*model.Experiment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Experiment, err error)
	FindInBatches(result *[]*model.Experiment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Experiment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExperimentDo
	Assign(attrs ...field.AssignExpr) IExperimentDo
	Joins(fields ...field.RelationField) IExperimentDo
	Preload(fields ...field.RelationField) IExperimentDo
	FirstOrInit() (*model.Experiment, error)
	FirstOrCreate() (*model.Experiment, error)
	FindByPage(offset int, limit int) (result []*model.Experiment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExperimentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e experimentDo) Debug() IExperimentDo {
	return e.withDO(e.DO.Debug())
}

func (e experimentDo) WithContext(ctx context.Context) IExperimentDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e experimentDo) ReadDB() IExperimentDo {
	return e.Clauses(dbresolver.Read)
}

func (e experimentDo) WriteDB() IExperimentDo {
	return e.Clauses(dbresolver.Write)
}

func (e experimentDo) Session(config *gorm.Session) IExperimentDo {
	return e.withDO(e.DO.Session(config))
}

func (e experimentDo) Clauses(conds ...clause.Expression) IExperimentDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e experimentDo) Returning(value interface{}, columns ...string) IExperimentDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e experimentDo) Not(conds ...gen.Condition) IExperimentDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e experimentDo) Or(conds ...gen.Condition) IExperimentDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e experimentDo) Select(conds ...field.Expr) IExperimentDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e experimentDo) Where(conds ...gen.Condition) IExperimentDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e experimentDo) Order(conds ...field.Expr) IExperimentDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e experimentDo) Distinct(cols ...field.Expr) IExperimentDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e experimentDo) Omit(cols ...field.Expr) IExperimentDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e experimentDo) Join(table schema.Tabler, on ...field.Expr) IExperimentDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e experimentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExperimentDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e experimentDo) RightJoin(table schema.Tabler, on ...field.Expr) IExperimentDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e experimentDo) Group(cols ...field.Expr) IExperimentDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e experimentDo) Having(conds ...gen.Condition) IExperimentDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e experimentDo) Limit(limit int) IExperimentDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e experimentDo) Offset(offset int) IExperimentDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e experimentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExperimentDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e experimentDo) Unscoped() IExperimentDo {
	return e.withDO(e.DO.Unscoped())
}

func (e experimentDo) Create(values ...*model.Experiment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e experimentDo) CreateInBatches(values []*model.Experiment, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e experimentDo) Save(values ...*model.Experiment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e experimentDo) First() (*model.Experiment, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Experiment), nil
	}
}

func (e experimentDo) Take() (*model.Experiment, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Experiment), nil
	}
}

func (e experimentDo) Last() (*model.Experiment, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Experiment), nil
	}
}

func (e experimentDo) Find() ([]*model.Experiment, error) {
	result, err := e.DO.Find()
	return result.([]*model.Experiment), err
}

func (e experimentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Experiment, err error) {
	buf := make([]*model.Experiment, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e experimentDo) FindInBatches(result *[]*model.Experiment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e experimentDo) Attrs(attrs ...field.AssignExpr) IExperimentDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e experimentDo) Assign(attrs ...field.AssignExpr) IExperimentDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e experimentDo) Joins(fields ...field.RelationField) IExperimentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e experimentDo) Preload(fields ...field.RelationField) IExperimentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e experimentDo) FirstOrInit() (*model.Experiment, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Experiment), nil
	}
}

func (e experimentDo) FirstOrCreate() (*model.Experiment, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Experiment), nil
	}
}

func (e experimentDo) FindByPage(offset int, limit int) (result []*model.Experiment, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e experimentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e experimentDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e experimentDo) Delete(models ...*model.Experiment) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *experimentDo) withDO(do gen.Dao) *experimentDo {
	e.DO = *do.(*gen.DO)
	return e
}
