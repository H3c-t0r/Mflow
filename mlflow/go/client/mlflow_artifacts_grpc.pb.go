// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MlflowArtifactsServiceClient is the client API for MlflowArtifactsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MlflowArtifactsServiceClient interface {
	DownloadArtifact(ctx context.Context, in *DownloadArtifact, opts ...grpc.CallOption) (*DownloadArtifact_Response, error)
	UploadArtifact(ctx context.Context, in *UploadArtifact, opts ...grpc.CallOption) (*UploadArtifact_Response, error)
	ListArtifacts(ctx context.Context, in *ListArtifacts, opts ...grpc.CallOption) (*ListArtifacts_Response, error)
}

type mlflowArtifactsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMlflowArtifactsServiceClient(cc grpc.ClientConnInterface) MlflowArtifactsServiceClient {
	return &mlflowArtifactsServiceClient{cc}
}

func (c *mlflowArtifactsServiceClient) DownloadArtifact(ctx context.Context, in *DownloadArtifact, opts ...grpc.CallOption) (*DownloadArtifact_Response, error) {
	out := new(DownloadArtifact_Response)
	err := c.cc.Invoke(ctx, "/mlflow.artifacts.MlflowArtifactsService/downloadArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlflowArtifactsServiceClient) UploadArtifact(ctx context.Context, in *UploadArtifact, opts ...grpc.CallOption) (*UploadArtifact_Response, error) {
	out := new(UploadArtifact_Response)
	err := c.cc.Invoke(ctx, "/mlflow.artifacts.MlflowArtifactsService/uploadArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlflowArtifactsServiceClient) ListArtifacts(ctx context.Context, in *ListArtifacts, opts ...grpc.CallOption) (*ListArtifacts_Response, error) {
	out := new(ListArtifacts_Response)
	err := c.cc.Invoke(ctx, "/mlflow.artifacts.MlflowArtifactsService/listArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MlflowArtifactsServiceServer is the server API for MlflowArtifactsService service.
// All implementations must embed UnimplementedMlflowArtifactsServiceServer
// for forward compatibility
type MlflowArtifactsServiceServer interface {
	DownloadArtifact(context.Context, *DownloadArtifact) (*DownloadArtifact_Response, error)
	UploadArtifact(context.Context, *UploadArtifact) (*UploadArtifact_Response, error)
	ListArtifacts(context.Context, *ListArtifacts) (*ListArtifacts_Response, error)
	mustEmbedUnimplementedMlflowArtifactsServiceServer()
}

// UnimplementedMlflowArtifactsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMlflowArtifactsServiceServer struct {
}

func (UnimplementedMlflowArtifactsServiceServer) DownloadArtifact(context.Context, *DownloadArtifact) (*DownloadArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadArtifact not implemented")
}
func (UnimplementedMlflowArtifactsServiceServer) UploadArtifact(context.Context, *UploadArtifact) (*UploadArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadArtifact not implemented")
}
func (UnimplementedMlflowArtifactsServiceServer) ListArtifacts(context.Context, *ListArtifacts) (*ListArtifacts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifacts not implemented")
}
func (UnimplementedMlflowArtifactsServiceServer) mustEmbedUnimplementedMlflowArtifactsServiceServer() {
}

// UnsafeMlflowArtifactsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MlflowArtifactsServiceServer will
// result in compilation errors.
type UnsafeMlflowArtifactsServiceServer interface {
	mustEmbedUnimplementedMlflowArtifactsServiceServer()
}

func RegisterMlflowArtifactsServiceServer(s *grpc.Server, srv MlflowArtifactsServiceServer) {
	s.RegisterService(&_MlflowArtifactsService_serviceDesc, srv)
}

func _MlflowArtifactsService_DownloadArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlflowArtifactsServiceServer).DownloadArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlflow.artifacts.MlflowArtifactsService/DownloadArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlflowArtifactsServiceServer).DownloadArtifact(ctx, req.(*DownloadArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlflowArtifactsService_UploadArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlflowArtifactsServiceServer).UploadArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlflow.artifacts.MlflowArtifactsService/UploadArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlflowArtifactsServiceServer).UploadArtifact(ctx, req.(*UploadArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlflowArtifactsService_ListArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtifacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlflowArtifactsServiceServer).ListArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlflow.artifacts.MlflowArtifactsService/ListArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlflowArtifactsServiceServer).ListArtifacts(ctx, req.(*ListArtifacts))
	}
	return interceptor(ctx, in, info, handler)
}

var _MlflowArtifactsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mlflow.artifacts.MlflowArtifactsService",
	HandlerType: (*MlflowArtifactsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "downloadArtifact",
			Handler:    _MlflowArtifactsService_DownloadArtifact_Handler,
		},
		{
			MethodName: "uploadArtifact",
			Handler:    _MlflowArtifactsService_UploadArtifact_Handler,
		},
		{
			MethodName: "listArtifacts",
			Handler:    _MlflowArtifactsService_ListArtifacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mlflow_artifacts.proto",
}
