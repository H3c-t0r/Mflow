import graphene
from datetime import datetime
from mlflow.server.graphql.graphql_custom_scalars import LongString
from mlflow.server.graphql.autogenerated_graphql_schema import QueryType, MutationType

# autogenerated
class ServerInfo(graphene.ObjectType):
    timestamp = LongString(description="Current server timestamp")

    def resolve_timestamp(self, info):
        # Return the current timestamp
        return datetime.now().isoformat()

# Add a new ObjectType for the Test query
class Test(graphene.ObjectType):
    # This field will be resolved with the default resolver
    output = graphene.String(description="Echoes the input string")


# Extension experiments
# Manually write this
class ExtendedServerInfo(ServerInfo):
    # New field
    additional_info = graphene.String(description="Additional info field")

    def resolve_additional_info(self, info):
        # Logic to resolve the additional_info
        return "Some additional information"


class TestInputField(graphene.InputField):
    timestamp = graphene.String(description="Current server timestamp")

class TestInputObjecttype(graphene.InputObjectType):
    timestamp = graphene.String(description="Current server timestamp")

# Autogenerated
class BaseQuery(graphene.ObjectType):
    # For extensions, need to add alias, this will be autogenerated with some annotations
    # ServerInfo = ExtendedServerInfo
    server_info = graphene.Field(ExtendedServerInfo, description="Information about the server")
    test = graphene.Field(Test, input=TestInputObjecttype(), description="Simple echoing field")

    def resolve_server_info(self, info):
        # Return an instance of ServerInfo
        return ServerInfo()

    def resolve_test(self, info, input_string):
        return {"output": input_string}


# Manually written
class Query(QueryType): # This is going to be used to do custom extensions
    test = graphene.Field(Test, input_string=graphene.String(), description="Simple echoing field")

    def resolve_test(self, info, input_string):
        return {"output": input_string}
# server_info = graphene.Field(ExtendedServerInfo, description="Information about the server")
    # def resolve_server_info(self, info):
    #     # Return an instance of ServerInfo
    #     return ServerInfo()

class Mutation(MutationType):
    pass

schema = graphene.Schema(query=Query, mutation=Mutation)

print(str(schema))