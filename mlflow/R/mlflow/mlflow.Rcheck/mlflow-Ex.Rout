
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mlflow"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mlflow')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("mlflow_cli")
> ### * mlflow_cli
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlflow_cli
> ### Title: MLflow Command
> ### Aliases: mlflow_cli
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(mlflow)
> ##D mlflow_install()
> ##D 
> ##D mlflow_cli("server", "--help")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mlflow_create_experiment")
> ### * mlflow_create_experiment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlflow_create_experiment
> ### Title: Create Experiment
> ### Aliases: mlflow_create_experiment
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(mlflow)
> ##D mlflow_install()
> ##D 
> ##D # create local experiment
> ##D mlflow_create_experiment("My Experiment")
> ##D 
> ##D # create experiment in remote MLflow server
> ##D mlflow_set_tracking_uri("http://tracking-server:5000")
> ##D mlflow_create_experiment("My Experiment")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mlflow_install")
> ### * mlflow_install
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlflow_install
> ### Title: Install MLflow
> ### Aliases: mlflow_install
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(mlflow)
> ##D mlflow_install()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mlflow_list_experiments")
> ### * mlflow_list_experiments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlflow_list_experiments
> ### Title: List Experiments
> ### Aliases: mlflow_list_experiments
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(mlflow)
> ##D mlflow_install()
> ##D 
> ##D # list local experiments
> ##D mlflow_list_experiments()
> ##D 
> ##D # list experiments in remote MLflow server
> ##D mlflow_set_tracking_uri("http://tracking-server:5000")
> ##D mlflow_list_experiments()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mlflow_rfunc_predict")
> ### * mlflow_rfunc_predict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlflow_rfunc_predict
> ### Title: Predict using RFunc MLflow Model
> ### Aliases: mlflow_rfunc_predict
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(mlflow)
> ##D 
> ##D # save simple model which roundtrips data as prediction
> ##D mlflow_save_model(function(df) df, "mlflow_roundtrip")
> ##D 
> ##D # save data as json
> ##D jsonlite::write_json(iris, "iris.json")
> ##D 
> ##D # predict existing model from json data
> ##D mlflow_rfunc_predict("mlflow_roundtrip", "iris.json")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mlflow_rfunc_serve")
> ### * mlflow_rfunc_serve
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlflow_rfunc_serve
> ### Title: Serve an RFunc MLflow Model
> ### Aliases: mlflow_rfunc_serve
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(mlflow)
> ##D 
> ##D # save simple model with constant prediction
> ##D mlflow_save_model(function(df) 1, "mlflow_constant")
> ##D 
> ##D # serve an existing model over a web interface
> ##D mlflow_rfunc_serve("mlflow_constant")
> ##D 
> ##D # request prediction from server
> ##D httr::POST("http://127.0.0.1:8090/predict/")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("mlflow_start_run")
> ### * mlflow_start_run
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlflow_start_run
> ### Title: Start Run
> ### Aliases: mlflow_start_run
> 
> ### ** Examples
> 
> ## Not run: 
> ##D with(mlflow_start_run(), {
> ##D   mlflow_log("test", 10)
> ##D })
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mlflow_ui")
> ### * mlflow_ui
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlflow_ui
> ### Title: MLflow User Interface
> ### Aliases: mlflow_ui
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(mlflow)
> ##D mlflow_install()
> ##D 
> ##D # launch mlflow ui locally
> ##D mlflow_ui()
> ##D 
> ##D # launch mlflow ui for existing mlflow server
> ##D mlflow_set_tracking_uri("http://tracking-server:5000")
> ##D mlflow_ui()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mlflow_uninstall")
> ### * mlflow_uninstall
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlflow_uninstall
> ### Title: Uninstalls MLflow.
> ### Aliases: mlflow_uninstall
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(mlflow)
> ##D mlflow_install()
> ##D mlflow_uninstall()
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.932 0.075 1.038 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
